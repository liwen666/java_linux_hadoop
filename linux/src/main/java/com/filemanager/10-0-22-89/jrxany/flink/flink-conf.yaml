jobmanager.rpc.address: 10.0.22.89
# The RPC port where the JobManager is reachable.
jobmanager.rpc.port: 6123
# The total process memory size for the JobManager.
jobmanager.memory.process.size: 1600m
# The total process memory size for the TaskManager.
taskmanager.memory.process.size: 3728m
# The number of task slots that each TaskManager offers. Each slot runs one parallel pipeline.
taskmanager.numberOfTaskSlots: 10
#taskmanager.data.port:
#taskmanager.data.port:
#taskmanager.rpc.port

parallelism.default: 1
#fs.default-scheme: hdfs://172.16.101.12:9082/flink
fs.default-scheme: file:///data/anyest/flink/flink
high-availability: zookeeper
#high-availability.storageDir: hdfs://172.16.101.12:9082/flink/ha
high-availability.storageDir: file:///data/anyest/flink/flink/ha
high-availability.zookeeper.quorum: 10.0.22.87:2181
high-availability.zookeeper.client.acl: open

state.backend: filesystem
#state.checkpoints.dir: hdfs://172.16.101.12:9082/flink-checkpoints
state.checkpoints.dir: file:///data/anyest/flink/flink-checkpoints
state.checkpoints.num-retained: 5
#state.savepoints.dir: hdfs://172.16.101.12:9082/flink-savepoints
state.savepoints.dir: file:///data/anyest/flink/flink-savepoints
state.backend.incremental: true
jobmanager.execution.failover-strategy: region

rest.port: 8081

# The address to which the REST client will connect to
rest.address: 0.0.0.0

# Port range for the REST and web server to bind to.
#
#rest.bind-port: 8080-8090

# The address that the REST & web server binds to
#
#rest.bind-address: 0.0.0.0

web.submit.enable: true
# Override the directories for temporary files. If not specified, the
# system-specific Java temporary directory (java.io.tmpdir property) is taken.
#
# For framework setups on Yarn or Mesos, Flink will automatically pick up the
# containers' temp directories without any need for configuration.
#
# Add a delimited list for multiple directories, using the system directory
# delimiter (colon ':' on unix) or a comma, e.g.:
#     /data1/tmp:/data2/tmp:/data3/tmp
#
# Note: Each directory entry is read from and written to by a different I/O
# thread. You can include the same directory multiple times in order to create
# multiple I/O threads against that directory. This is for example relevant for
# high-throughput RAIDs.
#
io.tmp.dirs: /data/anyest/flink/tmp
env.log.dir: /data/log/flink



# The classloading resolve order. Possible values are 'child-first' (Flink's default)
# and 'parent-first' (Java's default).
#
# Child first classloading allows users to use different dependency/library
# versions in their application than those in the classpath. Switching back
# to 'parent-first' may help with debugging dependency issues.
#
classloader.resolve-order: child-first

# The amount of memory going to the network stack. These numbers usually need
# no tuning. Adjusting them may be necessary in case of an "Insufficient number
# of network buffers" error. The default min is 64MB, the default max is 1GB.
#
# taskmanager.memory.network.fraction: 0.1
# taskmanager.memory.network.min: 64mb
# taskmanager.memory.network.max: 1gb

#==============================================================================
# Flink Cluster Security Configuration
#==============================================================================

# Kerberos authentication for various components - Hadoop, ZooKeeper, and connectors -
# may be enabled in four steps:
# 1. configure the local krb5.conf file
# 2. provide Kerberos credentials (either a keytab or a ticket cache w/ kinit)
# 3. make the credentials available to various JAAS login contexts
# 4. configure the connector to use JAAS/SASL

# The below configure how Kerberos credentials are provided. A keytab will be used instead of
# a ticket cache if the keytab path and principal are set.

# security.kerberos.login.use-ticket-cache: true
# security.kerberos.login.keytab: /path/to/kerberos/keytab
# security.kerberos.login.principal: flink-user

# The configuration below defines which JAAS login contexts

# security.kerberos.login.contexts: Client,KafkaClient

#==============================================================================
# ZK Security Configuration
#==============================================================================

# Below configurations are applicable if ZK ensemble is configured for security

# Override below configuration to provide custom ZK service name if configured
# zookeeper.sasl.service-name: zookeeper

# The configuration below must match one of the values set in "security.kerberos.login.contexts"
# zookeeper.sasl.login-context-name: Client

#==============================================================================
# HistoryServer
#==============================================================================

# The HistoryServer is started and stopped via bin/historyserver.sh (start|stop)

# Directory to upload completed jobs to. Add this directory to the list of
# monitored directories of the HistoryServer as well (see below).
jobmanager.archive.fs.dir: file:///data/anyest/flink/completed-jobs/
#jobmanager.archive.fs.dir: hdfs://172.16.101.12:9082/completed-jobs/

# The address under which the web-based HistoryServer listens.
#historyserver.web.address: 0.0.0.0

# The port under which the web-based HistoryServer listens.
historyserver.web.port: 8082

# Comma separated list of directories to monitor for completed jobs.
#historyserver.archive.fs.dir: hdfs://172.16.101.12:9082/history/completed-jobs/
historyserver.archive.fs.dir: file:///data/anyest/flink/history/completed-jobs/

# Interval in milliseconds for refreshing the monitored directories.
historyserver.archive.fs.refresh-interval: 10000

#jobmanager.web.tmpdir: /data/anyest/tmp/flink-tempdir
#jobmanager.web.upload.dir: /data/anyest/tmp/flink-tempdir

